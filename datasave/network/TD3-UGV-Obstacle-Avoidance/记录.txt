训练相关参数：
关于回合终止的的判断：
    def is_Terminal(self, param=None):
        self.terminal_flag = 0
        if self.time > self.timeMax:
            print('...time out...')
            self.terminal_flag = 2
            return True
        if self.collision_check():
            print('...collision...')
            self.terminal_flag = 4
            return True
        # if self.delta_phi_absolute > 6 * math.pi + deg2rad(0) and dis_two_points([self.x, self.y], [self.initX, self.initY]) <= 1.0:
        if self.delta_phi_absolute > 6 * math.pi + deg2rad(0):
            print('...转的角度太大了...')
            self.terminal_flag = 1
            return True
        if dis_two_points([self.x, self.y], self.terminal) <= self.miss:
            print('...success...')
            self.terminal_flag = 3
            return True
        if self.is_out():
            print('...out...')
            self.terminal_flag = 4
            return True
        return False

关于奖励函数的设计：
    def get_reward(self, param=None):
        cex = self.current_state[0] * self.x_size / self.staticGain
        cey = self.current_state[1] * self.y_size / self.staticGain
        nex = self.next_state[0] * self.x_size / self.staticGain
        ney = self.next_state[1] * self.y_size / self.staticGain
        currentError = math.sqrt(cex ** 2 + cey ** 2)
        nextError = math.sqrt(nex ** 2 + ney ** 2)

        r1 = -1  # 常值误差，每运行一步，就 -1

        if currentError > nextError + 1e-3:
            r2 = 5
        elif 1e-3 + currentError < nextError:
            r2 = -5
        else:
            r2 = 0

        currentTheta = cal_vector_rad([cex, cey], [math.cos(self.current_state[4]), math.sin(self.current_state[4])])
        nextTheta = cal_vector_rad([nex, ney], [math.cos(self.next_state[4]), math.sin(self.next_state[4])])
        # print(currentTheta, nextTheta)
        if currentTheta > nextTheta + 1e-2:
            r3 = 2
        elif 1e-2 + currentTheta < nextTheta:
            r3 = -2
        else:
            r3 = 0
        # r3 = 0          # 不给角度惩罚

        '''4. 其他'''
        if self.terminal_flag == 3:  # 成功了
            r4 = 100
        elif self.terminal_flag == 1:  # 转的角度太大了
            r4 = 0
        elif self.terminal_flag == 4:  # 碰撞障碍物
            r4 = -10
        else:
            r4 = 0
        '''4. 其他'''

        self.reward = r1 + r2 + r3 + r4

关于神经网络的结构：
class CriticNetWork(nn.Module):
    def __init__(self, beta, state_dim, fc1_dims, fc2_dims, action_dim, name, chkpt_dir):
        super(CriticNetWork, self).__init__()
        self.state_dim = state_dim
        self.action_dim = action_dim
        self.checkpoint_file = chkpt_dir + name + '_ddpg'

        self.fc1 = nn.Linear(self.state_dim, fc1_dims)  # state -> hidden1
        self.batch_norm1 = nn.LayerNorm(fc1_dims)

        self.fc2 = nn.Linear(fc1_dims, fc2_dims)  # hidden1 -> hidden2
        self.batch_norm2 = nn.LayerNorm(fc2_dims)

        self.action_value = nn.Linear(self.action_dim, fc2_dims)  # action -> hidden2
        self.q = nn.Linear(fc2_dims, 1)  # hidden2 -> output action value

        # self.initialization()

        self.optimizer = torch.optim.Adam(self.parameters(), lr=beta)
        self.device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
        self.to(self.device)

    def forward(self, state, action):
        state_value = self.fc1(state)  # forward
        state_value = self.batch_norm1(state_value)  # batch normalization
        state_value = func.relu(state_value)  # relu

        state_value = self.fc2(state_value)
        state_value = self.batch_norm2(state_value)

        action_value = func.relu(self.action_value(action))
        state_action_value = func.relu(torch.add(state_value, action_value))
        state_action_value = self.q(state_action_value)

        return state_action_value

    def initialization_default(self):
        self.fc1.reset_parameters()
        self.batch_norm1.reset_parameters()
        self.fc2.reset_parameters()
        self.batch_norm2.reset_parameters()

        self.action_value.reset_parameters()
        self.q.reset_parameters()

    def initialization(self):
        f1 = 1 / np.sqrt(self.fc1.weight.data.size()[0])
        nn.init.uniform_(self.fc1.weight.data, -f1, f1)
        nn.init.uniform_(self.fc1.bias.data, -f1, f1)

        f2 = 1 / np.sqrt(self.fc2.weight.data.size()[0])
        nn.init.uniform_(self.fc2.weight.data, -f2, f2)
        nn.init.uniform_(self.fc2.bias.data, -f2, f2)

        f3 = 0.003
        nn.init.uniform_(self.q.weight.data, -f3, f3)
        nn.init.uniform_(self.q.bias.data, -f3, f3)

    def save_checkpoint(self, name=None, path='', num=None):
        print('...saving checkpoint...')
        if name is None:
            torch.save(self.state_dict(), self.checkpoint_file)
        else:
            if num is None:
                torch.save(self.state_dict(), path + name)
            else:
                torch.save(self.state_dict(), path + name + str(num))

    def load_checkpoint(self):
        print('...loading checkpoint...')
        self.load_state_dict(torch.load(self.checkpoint_file))


class ActorNetwork(nn.Module):
    def __init__(self,
                 alpha,
                 state_dim1, fc1_dims1, fc2_dims1, fc3_dims1,
                 state_dim2, fc1_dims2, fc2_dims2, fc3_dims2,
                 fc_combine_dims,
                 action_dim, name, chkpt_dir):
        super(ActorNetwork, self).__init__()
        self.state_dim1 = state_dim1
        self.state_dim2 = state_dim2
        self.action_dim = action_dim

        self.checkpoint_file = chkpt_dir + name + '_ddpg'

        self.linear11 = nn.Linear(self.state_dim1, fc1_dims1)  # 第一部分网络第一层
        self.batch_norm11 = nn.LayerNorm(fc1_dims1)
        self.linear12 = nn.Linear(fc1_dims1, fc2_dims1)  # 第一部分网络第二层
        self.batch_norm12 = nn.LayerNorm(fc2_dims1)
        self.linear13 = nn.Linear(fc2_dims1, fc3_dims1)
        self.batch_norm13 = nn.LayerNorm(fc3_dims1)  # 第一部分网络第三层

        self.linear21 = nn.Linear(self.state_dim2, fc1_dims2)  # 第二部分网络第一层
        self.batch_norm21 = nn.LayerNorm(fc1_dims2)
        self.linear22 = nn.Linear(fc1_dims2, fc2_dims2)  # 第二部分网络第二层
        self.batch_norm22 = nn.LayerNorm(fc2_dims2)
        self.linear23 = nn.Linear(fc2_dims2, fc3_dims2)
        self.batch_norm23 = nn.LayerNorm(fc3_dims2)  # 第二部分网络第三层

        self.mu = nn.Linear(fc3_dims1 + fc3_dims2, self.action_dim)

        # self.combine = nn.Linear(fc3_dims1 + fc3_dims2, fc_combine_dims)  # 第三层，合并
        # self.mu = nn.Linear(fc_combine_dims, self.action_dim)  # 第四层，直接输出

        # self.initialization()

        self.optimizer = torch.optim.Adam(self.parameters(), lr=alpha)
        self.device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
        self.to(self.device)

    def initialization_default(self):
        self.linear11.reset_parameters()
        self.batch_norm11.reset_parameters()
        self.linear12.reset_parameters()
        self.batch_norm12.reset_parameters()
        self.linear13.reset_parameters()
        self.batch_norm13.reset_parameters()

        self.linear21.reset_parameters()
        self.batch_norm21.reset_parameters()
        self.linear22.reset_parameters()
        self.batch_norm22.reset_parameters()
        self.linear23.reset_parameters()
        self.batch_norm23.reset_parameters()

        # self.combine.reset_parameters()
        self.mu.reset_parameters()

    def forward(self, state1, state2):
        """
        :param state1:      first part of the data
        :param state2:      second part of teh data
        :return:            output of the net
        """
        x1 = self.linear11(state1)
        x1 = self.batch_norm11(x1)
        x1 = func.relu(x1)

        x1 = self.linear12(x1)
        x1 = self.batch_norm12(x1)
        x1 = func.relu(x1)

        x1 = self.linear13(x1)
        x1 = self.batch_norm13(x1)
        x1 = func.relu(x1)  # 该合并了

        x2 = self.linear21(state2)
        x2 = self.batch_norm21(x2)
        x2 = func.relu(x2)

        x2 = self.linear22(x2)
        x2 = self.batch_norm22(x2)
        x2 = func.relu(x2)

        x2 = self.linear23(x2)
        x2 = self.batch_norm23(x2)
        x2 = func.relu(x2)  # 该合并了

        x = torch.cat((x1, x2)) if x1.dim() == 1 else torch.cat((x1, x2), dim=1)
        # print(x1.size(), x2.size(), x.size())
        # x = self.combine(x)
        # x = func.relu(x)

        x = torch.tanh(self.mu(x))
        return x

    def save_checkpoint(self, name=None, path='', num=None):
        print('...saving checkpoint...')
        if name is None:
            torch.save(self.state_dict(), self.checkpoint_file)
        else:
            if num is None:
                torch.save(self.state_dict(), path + name)
            else:
                torch.save(self.state_dict(), path + name + str(num))

    def load_checkpoint(self):
        print('...loading checkpoint...')
        self.load_state_dict(torch.load(self.checkpoint_file))

DDPG中的actor与critic网络
        self.actor = ActorNetwork(self.actor_lr,
                                  self.state_dim_nn1, 128, 64, 64,     # 非激光雷达
                                  self.state_dim_nn2, 128, 64, 32,     # 激光雷达
                                  64,
                                  self.action_dim_nn, name='Actor', chkpt_dir=path)
        self.target_actor = ActorNetwork(self.actor_lr,
                                         self.state_dim_nn1, 128, 64, 64,
                                         self.state_dim_nn2, 128, 64, 32,
                                         64,
                                         self.action_dim_nn, name='TargetActor', chkpt_dir=path)

        self.critic = CriticNetWork(self.critic_lr, self.state_dim_nn, 128, 64, self.action_dim_nn, name='Critic', chkpt_dir=path)
        self.target_critic = CriticNetWork(self.critic_lr, self.state_dim_nn, 128, 64, self.action_dim_nn, name='TargetCritic', chkpt_dir=path)


DDPG其他参数：
    agent = DDPG2(gamma=0.99,
                  actor_learning_rate=1e-4,
                  critic_learning_rate=1e-3,
                  actor_soft_update=1e-2,
                  critic_soft_update=1e-2,
                  memory_capacity=80000,         # 100000
                  batch_size=512,      # 1024
                  modelFileXML=cfgPath + cfgFile,
                  path=simulationPath)


噪声：高斯，1/3方差
探索概率0,2
所有数据都计入经验池